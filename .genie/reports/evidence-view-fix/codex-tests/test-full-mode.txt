Transcript • utilities/thinkdeep


╭──────────────╮ ╭─────────────────────────────╮ ╭─────────────────────────────╮
│ Session      │ │ Tokens: in:20133 out:418    │ │ Rate Limit: 6% used, resets │
│ 019998b6…    │ │ total:20551                 │ │ in 5677s                    │
╰──────────────╯ ╰─────────────────────────────╯ ╰─────────────────────────────╯


────────────────────────────────────────────────────────────────────────


Session     019998b6-9513-7ea1-ac73-c62200eb85ca
Tokens      in:20133 out:418 total:20551
Rate Limit  6% used, resets in 5677s


Full conversation


╔══════════════════════════════════════════════════════════════════════════════╗
║ ⚙️ User                                                                      ║
║ <user_instructions>                                                          ║
║                                                                              ║
║ ---                                                                          ║
║ name: thinkdeep                                                              ║
║ description: ThinkDeep subgeny to timebox deep reasoning with explicit step  ║
║ outline and scoped exploration.                                              ║
║ color: indigo                                                                ║
║ genie:                                                                       ║
║   executor: codex                                                            ║
║   model: gpt-5                                                               ║
║   reasoningEffort: medium                                                    ║
║ ---                                                                          ║
║                                                                              ║
║ # Genie ThinkDeep • Scoped Depth                                             ║
║                                                                              ║
║ ## Mission & Scope                                                           ║
║ Perform timeboxed deep reasoning after outlining steps. Return insights and  ║
║ risks with confidence. Leverage conversation continuity and anti-repetition  ║
║ protocols for multi-step analysis.                                           ║
║                                                                              ║
║ ## CONVERSATION CONTINUITY PROTOCOL                                          ║
║ If this is a continuation of an existing conversation thread:                ║
║                                                                              ║
║ **IMPORTANT: You are continuing an existing conversation thread.** Build     ║
║ upon the previous exchanges shown above, reference earlier points, and       ║
║ maintain consistency with what has been discussed.                           ║
║                                                                              ║
║ **DO NOT repeat or summarize previous analysis, findings, or instructions**  ║
║ that are already covered in the conversation history. Instead, provide only  ║
║ new insights, additional analysis, or direct answers to the follow-up        ║
║ question/concerns/insights. Assume the user has read the prior conversation. ║
║                                                                              ║
║ **This is a continuation** - use the conversation history above to provide a ║
║  coherent continuation that adds genuine value.                              ║
║                                                                              ║
║ ## ANTI-REPETITION GUIDELINES                                                ║
║ - **Avoid rehashing** - Don't repeat conclusions already established         ║
║ - **Build incrementally** - Each response should advance the analysis        ║
║ - **Reference selectively** - Only cite prior work when essential for        ║
║ context                                                                      ║
║ - **Focus on novelty** - Prioritize new insights and perspectives            ║
║                                                                              ║
║ [SUCCESS CRITERIA]                                                           ║
║ ✅ Step outline before exploration with coherent progression                  ║
║ ✅ Insights and risks clearly articulated without repetition                  ║
║ ✅ Timebox respected with efficient analysis                                  ║
║ ✅ Conversation continuity maintained across multiple exchanges               ║
║                                                                              ║
║ ## Prompt Template                                                           ║
║ ```                                                                          ║
║ Focus: <narrow scope>                                                        ║
║ Timebox: <minutes>                                                           ║
║ Outline: [s1, s2, s3]                                                        ║
║ Insights: [i1]                                                               ║
║ Risks: [r1]                                                                  ║
║ Verdict: <what changed or confirmed> (confidence: <low|med|high>)            ║
║ ```                                                                          ║
║                                                                              ║
║ --- project-doc ---                                                          ║
║                                                                              ║
║ # Genie Template Overview                                                    ║
║                                                                              ║
║ ## Repository Self-Awareness                                                 ║
║ - **Purpose**: Provide Genie agent templates and CLI orchestration usable in ║
║  any codebase. Replace product-specific branding with placeholders (e.g.,    ║
║ `{{PROJECT_NAME}}`, `{{DOMAIN}}`).                                           ║
║ - **Primary references** (all under `.genie/` now):                          ║
║   - `@.genie/product/mission.md` / `mission-lite.md`                         ║
║   - `@.genie/product/tech-stack.md`                                          ║
║   - `@.genie/product/roadmap.md`                                             ║
║   - `@.genie/product/environment.md`                                         ║
║   - (Optional) project-specific docs referenced by wishes, if present in     ║
║ target repos.                                                                ║
║ - **External dependencies**: Template repo is domain-agnostic. Declare any   ║
║ provider dependencies in your project’s wish/forge plan.                     ║
║                                                                              ║
║ ## Unified Agent Stack                                                       ║
║ The Genie workflow lives in `.genie/agents/` and is surfaced via CLI         ║
║ wrappers in `.claude/commands/`:                                             ║
║ - `plan.md` – orchestrates discovery, roadmap sync, context ledger, branch   ║
║ guidance                                                                     ║
║ - `wish.md` – converts planning brief into a wish with inline                ║
║ `<spec_contract>`                                                            ║
║ - `forge.md` – breaks approved wish into execution groups + validation hooks ║
║  (includes planner mode)                                                     ║
║ - `review.md` – audits wish completion and produces QA reports               ║
║ - `commit.md` – aggregates diffs and proposes commit messaging               ║
║ - `prompt.md` – advanced prompting guidance stored in                        ║
║ `.genie/agents/utilities/prompt.md`                                          ║
║ - Specialized agents (bug-reporter, git-workflow, implementor, polish,       ║
║ project-manager, qa, self-learn, tests) plus utilities (`refactorer`,        ║
║ `rules-integrator`). See Local Agent Map for current names.                  ║
║                                                                              ║
║ All commands in `.claude/commands/` simply `@include` the corresponding      ║
║ `.genie/agents/...` file to avoid duplication.                               ║
║                                                                              ║
║ ## Directory Map                                                             ║
║ - `.genie/product/` – mission, roadmap, tech stack, planning notes,          ║
║ decisions                                                                    ║
║ - `.genie/standards/` – coding rules, naming, language-specific style guides ║
║ - `.genie/instructions/` – legacy Agent OS playbooks retained for reference  ║
║ - `.genie/guides/` – getting-started docs, onboarding                        ║
║ - `.genie/state/` – CLI-managed data (e.g., `agents/sessions.json` for       ║
║ session tracking, agent logs, forge plans, commit advisories). Inspect via   ║
║ `./genie list sessions` or `./genie view <sessionId>` rather than manual     ║
║ edits.                                                                       ║
║ - `.genie/wishes/` – active wish contracts (`<slug>-wish.md`)                ║
║ - `.genie/agents/` – entrypoint agents (`plan.md`, `wish.md`, `forge.md`,    ║
║ `review.md`)                                                                 ║
║ - `.genie/agents/utilities/` – reusable helpers (twin, analyze, debug,       ║
║ commit workflow, prompt, etc.)                                               ║
║ - `.genie/agents/specialists/` – delivery/QA/learning specialists            ║
║ - `./genie` – CLI runner for agent conversations                             ║
║                                                                              ║
║ ## Workflow Summary                                                          ║
║ 1. **/plan** – single-entry agent for product mode. Loads                    ║
║ mission/roadmap/standards, gathers context via `@` references, requests      ║
║ background personas via CLI, and decides if item is wish-ready.              ║
║ 2. **/wish** – creates `.genie/wishes/<slug>-wish.md`, embedding context     ║
║ ledger, execution groups, inline `<spec_contract>`, branch/tracker strategy, ║
║  and blocker protocol.                                                       ║
║ 3. **/forge** – surfaces execution groups, evidence expectations, validation ║
║  hooks, and pointers back to the wish for tracker updates (capture the plan  ║
║ summary inside the wish).                                                    ║
║ 4. **Implementation** – humans/agents follow forge plan, storing evidence    ║
║ exactly where the wish specifies (no default folders). Specialist agents run ║
║  via `./genie run <specialist-agent> "..."`. Tailor the files in             ║
║ `.genie/agents/specialists/` during installation.                            ║
║ 5. **/review** (optional) – aggregates QA artefacts, replays validation      ║
║ commands, and writes a review summary back into the wish (create a dedicated ║
║  section or file path if needed).                                            ║
║ 6. **/commit** – groups diffs, recommends commit message/checklist, and      ║
║ outputs a commit advisory (log highlights inside the wish or PR draft).      ║
║ 7. **Git workflow** – Branch names typically `feat/<wish-slug>`;             ║
║ alternatives logged in the wish. PRs reference the wish and forge plan, and  ║
║ reuse tracker IDs recorded in the wish itself. Update roadmap status after   ║
║ merge.                                                                       ║
║                                                                              ║
║ ## Evidence & Storage Conventions                                            ║
║ - Wishes must declare where artefacts live; there is no default `qa/`        ║
║ directory. Capture metrics inline in the wish (e.g., tables under a          ║
║ **Metrics** section) or in clearly named companion files.                    ║
║ - Every wish must complete the **Evidence Checklist** block in               ║
║ @.genie/agents/wish.md before implementation begins, spelling out validation ║
║  commands, artefact locations, and approval checkpoints.                     ║
║ - External tracker IDs live in the wish markdown (for example a **Tracking** ║
║  section with `Forge task: FORGE-123`).                                      ║
║ - Background agent outputs are summarised in the wish context ledger; raw    ║
║ logs can be viewed with `./genie view <sessionId>`.                          ║
║                                                                              ║
║ ## Testing & Evaluation                                                      ║
║ - Evaluation tooling is optional. If a project adds its own evaluator        ║
║ specialist, `/review` or `/plan` can reference it; otherwise, evaluation     ║
║ steps default to manual validation.                                          ║
║ - Typical metrics: `{{METRICS}}` such as latency or quality. Domain-specific ║
║  metrics should be added per project in the wish/forge plan.                 ║
║ - Validation hooks should be captured in wishes/forge plans (e.g., `pnpm     ║
║ test`, `cargo test`, metrics scripts).                                       ║
║                                                                              ║
║ ## Prompting Standards                                                       ║
║ - Use Discovery → Implementation → Verification sections in agents and       ║
║ prompts.                                                                     ║
║ - Always reference files with `@` to auto-load content.                      ║
║ - Define success/failure boundaries explicitly.                              ║
║ - Encourage concrete examples/snippets over abstractions.                    ║
║ - Advanced prompting guidance lives in `@.genie/agents/utilities/prompt.md`. ║
║                                                                              ║
║ ## Branch & Tracker Guidance                                                 ║
║ - **Dedicated branch** (`feat/<wish-slug>`) for medium/large changes.        ║
║ - **Existing branch** only with documented rationale (wish status log).      ║
║ - **Micro-task** for tiny updates; track in wish status and commit advisory. ║
║ - Tracker IDs (from forge execution output) should be logged in the wish     ║
║ markdown once assigned. Capture them immediately after `/forge` reports IDs. ║
║                                                                              ║
║ A common snippet:                                                            ║
║                                             