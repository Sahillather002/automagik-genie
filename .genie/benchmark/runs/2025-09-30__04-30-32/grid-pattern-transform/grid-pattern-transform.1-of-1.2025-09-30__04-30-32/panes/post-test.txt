root@7473d6b7f0e4:/app# bash /tests/run-tests.sh; tmux wait -S done
Hit:1 http://deb.debian.org/debian bookworm InRelease
Hit:2 http://deb.debian.org/debian bookworm-updates InRelease
Hit:3 http://deb.debian.org/debian-security bookworm-security InRelease
Reading package lists... Done
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
curl is already the newest version (7.88.1-10+deb12u14).
0 upgraded, 0 newly installed, 0 to remove and 40 not upgraded.
downloading uv 0.8.22 x86_64-unknown-linux-gnu
no checksums to verify
installing to /root/.local/bin
  uv
  uvx
everything's installed!

To add $HOME/.local/bin to your PATH, either restart your shell or run:

    source $HOME/.local/bin/env (sh, bash, zsh)
    source $HOME/.local/bin/env.fish (fish)
Initialized project `app`
Using CPython 3.13.1 interpreter at: /usr/local/bin/python3.13
Creating virtual environment at: .venv
Resolved 7 packages in 237ms
Prepared 5 packages in 238ms
Installed 5 packages in 23ms
 + iniconfig==2.1.0
 + packaging==25.0
 + pluggy==1.6.0
 + pygments==2.19.2
 + pytest==8.4.2
Resolved 8 packages in 248ms
Prepared 1 package in 630ms
Installed 1 package in 64ms
 + numpy==2.3.3
===================================================================== test session starts ======================================================================
platform linux -- Python 3.13.1, pytest-8.4.2, pluggy-1.6.0
rootdir: /tests
collected 3 items

../tests/test_outputs.py FFF                                                                                                                             [100%]

=========================================================================== FAILURES ===========================================================================
__________________________________________________________________ test_transformation_case1 ___________________________________________________________________

    def test_transformation_case1():
        """Test the first example case."""
        input_grid = [[8, 6], [6, 4]]

        expected_output = [
            [8, 6, 8, 6, 8, 6],
            [6, 4, 6, 4, 6, 4],
            [6, 8, 6, 8, 6, 8],
            [4, 6, 4, 6, 4, 6],
            [8, 6, 8, 6, 8, 6],
            [6, 4, 6, 4, 6, 4],
        ]

        result = solve(input_grid)

>       assert np.array_equal(np.array(result), np.array(expected_output)), (
            f"Expected output:\n{np.array(expected_output)}\n\n"
            f"Actual output:\n{np.array(result)}"
        )
E       AssertionError: Expected output:
E         [[8 6 8 6 8 6]
E          [6 4 6 4 6 4]
E          [6 8 6 8 6 8]
E          [4 6 4 6 4 6]
E          [8 6 8 6 8 6]
E          [6 4 6 4 6 4]]
E
E         Actual output:
E         [[8 6 8 6 8 6]
E          [6 4 6 4 6 4]
E          [4 6 4 6 4 6]
E          [6 8 6 8 6 8]
E          [8 6 8 6 8 6]
E          [6 4 6 4 6 4]]
E       assert False
E        +  where False = <function array_equal at 0x77e31515a670>(array([[8, 6, 8, 6, 8, 6],\n       [6, 4, 6, 4, 6, 4],\n       [4, 6, 4, 6, 4, 6],\n       [6
, 8, 6, 8, 6, 8],\n       [8, 6, 8, 6, 8, 6],\n       [6, 4, 6, 4, 6, 4]]), array([[8, 6, 8, 6, 8, 6],\n       [6, 4, 6, 4, 6, 4],\n       [6, 8, 6, 8, 6, 8],\n
       [4, 6, 4, 6, 4, 6],\n       [8, 6, 8, 6, 8, 6],\n       [6, 4, 6, 4, 6, 4]]))
E        +    where <function array_equal at 0x77e31515a670> = np.array_equal
E        +    and   array([[8, 6, 8, 6, 8, 6],\n       [6, 4, 6, 4, 6, 4],\n       [4, 6, 4, 6, 4, 6],\n       [6, 8, 6, 8, 6, 8],\n       [8, 6, 8, 6, 8, 6],\n
       [6, 4, 6, 4, 6, 4]]) = <built-in function array>([[8, 6, 8, 6, 8, 6], [6, 4, 6, 4, 6, 4], [4, 6, 4, 6, 4, 6], [6, 8, 6, 8, 6, 8], [8, 6, 8, 6, 8, 6], [6,
 4, 6, 4, 6, 4]])
E        +      where <built-in function array> = np.array
E        +    and   array([[8, 6, 8, 6, 8, 6],\n       [6, 4, 6, 4, 6, 4],\n       [6, 8, 6, 8, 6, 8],\n       [4, 6, 4, 6, 4, 6],\n       [8, 6, 8, 6, 8, 6],\n
       [6, 4, 6, 4, 6, 4]]) = <built-in function array>([[8, 6, 8, 6, 8, 6], [6, 4, 6, 4, 6, 4], [6, 8, 6, 8, 6, 8], [4, 6, 4, 6, 4, 6], [8, 6, 8, 6, 8, 6], [6,
 4, 6, 4, 6, 4]])
E        +      where <built-in function array> = np.array

/tests/test_outputs.py:28: AssertionError
__________________________________________________________________ test_transformation_case2 ___________________________________________________________________

    def test_transformation_case2():
        """Test the second example case."""
        input_grid = [[7, 9], [4, 3]]

        expected_output = [
            [7, 9, 7, 9, 7, 9],
            [4, 3, 4, 3, 4, 3],
            [9, 7, 9, 7, 9, 7],
            [3, 4, 3, 4, 3, 4],
            [7, 9, 7, 9, 7, 9],
            [4, 3, 4, 3, 4, 3],
        ]

        result = solve(input_grid)

>       assert np.array_equal(np.array(result), np.array(expected_output)), (
            f"Expected output:\n{np.array(expected_output)}\n\n"
            f"Actual output:\n{np.array(result)}"
        )
E       AssertionError: Expected output:
E         [[7 9 7 9 7 9]
E          [4 3 4 3 4 3]
E          [9 7 9 7 9 7]
E          [3 4 3 4 3 4]
E          [7 9 7 9 7 9]
E          [4 3 4 3 4 3]]
E
E         Actual output:
E         [[7 9 7 9 7 9]
E          [4 3 4 3 4 3]
E          [3 4 3 4 3 4]
E          [9 7 9 7 9 7]
E          [7 9 7 9 7 9]
E          [4 3 4 3 4 3]]
E       assert False
E        +  where False = <function array_equal at 0x77e31515a670>(array([[7, 9, 7, 9, 7, 9],\n       [4, 3, 4, 3, 4, 3],\n       [3, 4, 3, 4, 3, 4],\n       [9
, 7, 9, 7, 9, 7],\n       [7, 9, 7, 9, 7, 9],\n       [4, 3, 4, 3, 4, 3]]), array([[7, 9, 7, 9, 7, 9],\n       [4, 3, 4, 3, 4, 3],\n       [9, 7, 9, 7, 9, 7],\n
       [3, 4, 3, 4, 3, 4],\n       [7, 9, 7, 9, 7, 9],\n       [4, 3, 4, 3, 4, 3]]))
E        +    where <function array_equal at 0x77e31515a670> = np.array_equal
E        +    and   array([[7, 9, 7, 9, 7, 9],\n       [4, 3, 4, 3, 4, 3],\n       [3, 4, 3, 4, 3, 4],\n       [9, 7, 9, 7, 9, 7],\n       [7, 9, 7, 9, 7, 9],\n
       [4, 3, 4, 3, 4, 3]]) = <built-in function array>([[7, 9, 7, 9, 7, 9], [4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4], [9, 7, 9, 7, 9, 7], [7, 9, 7, 9, 7, 9], [4,
 3, 4, 3, 4, 3]])
E        +      where <built-in function array> = np.array
E        +    and   array([[7, 9, 7, 9, 7, 9],\n       [4, 3, 4, 3, 4, 3],\n       [9, 7, 9, 7, 9, 7],\n       [3, 4, 3, 4, 3, 4],\n       [7, 9, 7, 9, 7, 9],\n
       [4, 3, 4, 3, 4, 3]]) = <built-in function array>([[7, 9, 7, 9, 7, 9], [4, 3, 4, 3, 4, 3], [9, 7, 9, 7, 9, 7], [3, 4, 3, 4, 3, 4], [7, 9, 7, 9, 7, 9], [4,
 3, 4, 3, 4, 3]])
E        +      where <built-in function array> = np.array

/tests/test_outputs.py:49: AssertionError
__________________________________________________________________ test_transformation_case3 ___________________________________________________________________

    def test_transformation_case3():
        """Test the hidden example case."""
        input_grid = [[3, 2], [7, 8]]

        expected_output = [
            [3, 2, 3, 2, 3, 2],
            [7, 8, 7, 8, 7, 8],
            [2, 3, 2, 3, 2, 3],
            [8, 7, 8, 7, 8, 7],
            [3, 2, 3, 2, 3, 2],
            [7, 8, 7, 8, 7, 8],
        ]

        result = solve(input_grid)

>       assert np.array_equal(np.array(result), np.array(expected_output)), (
            f"Expected output:\n{np.array(expected_output)}\n\n"
            f"Actual output:\n{np.array(result)}"
        )
E       AssertionError: Expected output:
E         [[3 2 3 2 3 2]
E          [7 8 7 8 7 8]
E          [2 3 2 3 2 3]
E          [8 7 8 7 8 7]
E          [3 2 3 2 3 2]
E          [7 8 7 8 7 8]]
E
E         Actual output:
E         [[3 2 3 2 3 2]
E          [7 8 7 8 7 8]
E          [8 7 8 7 8 7]
E          [2 3 2 3 2 3]
E          [3 2 3 2 3 2]
E          [7 8 7 8 7 8]]
E       assert False
E        +  where False = <function array_equal at 0x77e31515a670>(array([[3, 2, 3, 2, 3, 2],\n       [7, 8, 7, 8, 7, 8],\n       [8, 7, 8, 7, 8, 7],\n       [2
, 3, 2, 3, 2, 3],\n       [3, 2, 3, 2, 3, 2],\n       [7, 8, 7, 8, 7, 8]]), array([[3, 2, 3, 2, 3, 2],\n       [7, 8, 7, 8, 7, 8],\n       [2, 3, 2, 3, 2, 3],\n
       [8, 7, 8, 7, 8, 7],\n       [3, 2, 3, 2, 3, 2],\n       [7, 8, 7, 8, 7, 8]]))
E        +    where <function array_equal at 0x77e31515a670> = np.array_equal
E        +    and   array([[3, 2, 3, 2, 3, 2],\n       [7, 8, 7, 8, 7, 8],\n       [8, 7, 8, 7, 8, 7],\n       [2, 3, 2, 3, 2, 3],\n       [3, 2, 3, 2, 3, 2],\n
       [7, 8, 7, 8, 7, 8]]) = <built-in function array>([[3, 2, 3, 2, 3, 2], [7, 8, 7, 8, 7, 8], [8, 7, 8, 7, 8, 7], [2, 3, 2, 3, 2, 3], [3, 2, 3, 2, 3, 2], [7,
 8, 7, 8, 7, 8]])
E        +      where <built-in function array> = np.array
E        +    and   array([[3, 2, 3, 2, 3, 2],\n       [7, 8, 7, 8, 7, 8],\n       [2, 3, 2, 3, 2, 3],\n       [8, 7, 8, 7, 8, 7],\n       [3, 2, 3, 2, 3, 2],\n
       [7, 8, 7, 8, 7, 8]]) = <built-in function array>([[3, 2, 3, 2, 3, 2], [7, 8, 7, 8, 7, 8], [2, 3, 2, 3, 2, 3], [8, 7, 8, 7, 8, 7], [3, 2, 3, 2, 3, 2], [7,
 8, 7, 8, 7, 8]])
E        +      where <built-in function array> = np.array

/tests/test_outputs.py:70: AssertionError
=================================================================== short test summary info ====================================================================
FAILED ../tests/test_outputs.py::test_transformation_case1 - AssertionError: Expected output:
FAILED ../tests/test_outputs.py::test_transformation_case2 - AssertionError: Expected output:
FAILED ../tests/test_outputs.py::test_transformation_case3 - AssertionError: Expected output:
====================================================================== 3 failed in 0.27s =======================================================================
root@7473d6b7f0e4:/app#
