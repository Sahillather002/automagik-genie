name: Publish RC on Dev ‚Üí Main Merge

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  publish-rc:
    # Only run if PR was merged from dev (not automated release PRs)
    if: |
      github.event.pull_request.merged == true &&
      github.event.pull_request.head.ref == 'dev' &&
      !startsWith(github.event.pull_request.title, 'chore: automated release')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        run: pnpm run test:all

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Clean up conflicting RC tags
        run: |
          # Get current version and calculate next RC
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Extract major.minor.patch-rc.N pattern
          if [[ $CURRENT_VERSION =~ ^([0-9]+\.[0-9]+\.[0-9]+)-rc\.([0-9]+)$ ]]; then
            BASE="${BASH_REMATCH[1]}"
            RC_NUM="${BASH_REMATCH[2]}"
            NEXT_RC=$((RC_NUM + 1))
            NEXT_TAG="v${BASE}-rc.${NEXT_RC}"

            echo "Next RC tag would be: $NEXT_TAG"

            # Check if tag exists locally or remotely
            if git tag -l | grep -q "^${NEXT_TAG}$"; then
              echo "‚ö†Ô∏è  Tag $NEXT_TAG exists locally, deleting..."
              git tag -d "$NEXT_TAG"
            fi

            if git ls-remote --tags origin | grep -q "refs/tags/${NEXT_TAG}$"; then
              echo "‚ö†Ô∏è  Tag $NEXT_TAG exists remotely, deleting..."
              git push origin ":refs/tags/${NEXT_TAG}" || echo "Failed to delete remote tag (may not have permission)"
            fi

            echo "‚úÖ Ready to create $NEXT_TAG"
          else
            echo "Current version is not an RC, bump will create first RC"
          fi

      - name: Bump RC version
        run: pnpm run bump:rc
        env:
          SKIP_PUSH: "true"

      - name: Publish to npm
        run: npm publish --tag next || echo "Package already published (expected during testing)"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Get version
        id: version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Push version bump and create release
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          BRANCH="release/v${VERSION}"

          # Create and push branch with version bump and tag
          git checkout -b "${BRANCH}" || git checkout "${BRANCH}"
          git push --follow-tags origin "${BRANCH}" || echo "Branch already exists"

          # Create GitHub Release (skip if exists)
          if ! gh release view "v${VERSION}" >/dev/null 2>&1; then
            gh release create "v${VERSION}" \
              --title "Release v${VERSION}" \
              --notes "## üöÄ Automated Release

          This RC was automatically published when dev was merged to main.

          **PR:** #${{ github.event.pull_request.number }} - ${{ github.event.pull_request.title }}

          **Install:**
          \`\`\`bash
          npm install automagik-genie@next
          # or
          pnpm install -g automagik-genie@next
          \`\`\`

          See [CHANGELOG.md](https://github.com/namastexlabs/automagik-genie/blob/main/CHANGELOG.md) for details." \
              --prerelease \
              --target "${BRANCH}"
            echo "‚úÖ Created release v${VERSION}"
          else
            echo "‚è≠Ô∏è  Release v${VERSION} already exists, skipping"
          fi

          # Create PR to merge version bump to main (skip if exists)
          if ! gh pr list --head "${BRANCH}" --base main --json number --jq '.[0].number' | grep -q .; then
            gh pr create \
              --base main \
              --head "${BRANCH}" \
              --title "chore: automated release v${VERSION}" \
              --body "ü§ñ Automated version bump and release created by GitHub Actions.

          **Version:** ${VERSION}
          **Release:** https://github.com/${{ github.repository }}/releases/tag/v${VERSION}
          **Triggered by:** PR #${{ github.event.pull_request.number }}

          This PR will be auto-merged."

            # Auto-merge the PR
            gh pr merge "${BRANCH}" --squash --auto --delete-branch
            echo "‚úÖ Created and auto-merged PR for v${VERSION}"
          else
            echo "‚è≠Ô∏è  PR already exists for ${BRANCH}, skipping"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
