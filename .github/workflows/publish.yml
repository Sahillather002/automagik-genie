name: Publish to NPM

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to publish (e.g., v2.0.0)"
        required: true
        type: string

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.18.0

      - name: Determine tag ref
        id: tagref
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            RAW=${{ github.event.inputs.tag }}
            VERSION=${RAW#v}
            REF=refs/tags/v$VERSION
          else
            REF="$GITHUB_REF"
            VERSION=${REF#refs/tags/v}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "ref=$REF" >> $GITHUB_OUTPUT
          echo "Resolved version $VERSION from $REF"

      - name: Fetch tag ref
        if: github.event_name == 'workflow_dispatch'
        run: git fetch --tags origin ${{ steps.tagref.outputs.ref }}:${{ steps.tagref.outputs.ref }}

      - name: Verify package.json version matches tag
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          TAG_VERSION=${{ steps.tagref.outputs.version }}
          echo "Package version: $PACKAGE_VERSION"
          echo "Tag version: $TAG_VERSION"
          if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
            echo "❌ Version mismatch between package.json and tag"
            exit 1
          fi
          echo "✅ Versions match"

      - name: Validate version sequence
        run: |
          node -e "
            const { execSync } = require('child_process');
            const pkg = require('./package.json');
            const currentVersion = pkg.version;
            const tags = execSync('git tag -l --sort=-version:refname').toString().trim().split('\n');
            const otherTags = tags.filter(t => t && t.startsWith('v') && t !== 'v' + currentVersion);
            if (otherTags.length === 0) {
              console.log('First release - no sequence validation needed');
              process.exit(0);
            }
            const latestTag = otherTags[0].replace('v', '');
            const parse = (v) => v.split('.').map(Number);
            const [cMaj, cMin, cPat] = parse(currentVersion);
            const [lMaj, lMin, lPat] = parse(latestTag);
            const validPatch = cMaj === lMaj && cMin === lMin && cPat === lPat + 1;
            const validMinor = cMaj === lMaj && cMin === lMin + 1 && cPat === 0;
            const validMajor = cMaj === lMaj + 1 && cMin === 0 && cPat === 0;
            if (!validPatch && !validMinor && !validMajor) {
              console.error('Invalid version bump sequence');
              process.exit(1);
            }
            console.log('Version sequence looks good');
          "

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Verify package contents
        run: |
          echo "=== package.json excerpt ==="
          cat package.json | grep -A5 -B5 version
          echo "=== npm pack (dry run) ==="
          npm pack --dry-run

      - name: Run tests
        run: |
          GENIE_SKIP_IDENTITY_SMOKE=1 pnpm run test:genie

      - name: Check if version already published
        id: npm_version
        run: |
          if npm view automagik-genie@${{ steps.tagref.outputs.version }} version >/dev/null 2>&1; then
            echo "exists=1" >> $GITHUB_OUTPUT
            echo "Version already exists on npm, skipping publish"
          else
            echo "exists=0" >> $GITHUB_OUTPUT
          fi

      - name: Publish to NPM
        if: steps.npm_version.outputs.exists == '0'
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GENIE_SKIP_IDENTITY_SMOKE: '1'

      - name: Success notification
        run: |
          echo "🎉 Published automagik-genie@${{ steps.tagref.outputs.version }} to NPM"
          echo "📦 https://www.npmjs.com/package/automagik-genie"
