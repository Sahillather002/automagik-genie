name: Publish to NPM

on:
  push:
    branches:
      - main
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to publish (e.g., v2.0.1)"
        required: true
        type: string

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Auto-bump RC version on push to main
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: bump
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          pnpm install

          # Capture old version before bump
          OLD_VERSION=$(node -p "require('./package.json').version")

          # Run bump (will fail if tag exists, that's OK)
          pnpm run bump:rc || echo "Bump failed (tag may exist)"

          # Check if version changed
          NEW_VERSION=$(node -p "require('./package.json').version")

          if [ "$OLD_VERSION" != "$NEW_VERSION" ]; then
            echo "bumped=true" >> $GITHUB_OUTPUT
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            git push origin main --follow-tags
          else
            echo "bumped=false" >> $GITHUB_OUTPUT
            echo "No version bump needed (tag already exists)"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine tag ref
        id: tagref
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            RAW=${{ github.event.inputs.tag }}
            VERSION=${RAW#v}
            REF=refs/tags/v$VERSION
          elif [ "${{ github.event_name }}" = "push" ]; then
            # Get version from package.json after bump
            VERSION=$(node -p "require('./package.json').version")
            REF=refs/tags/v$VERSION
          else
            REF="$GITHUB_REF"
            VERSION=${REF#refs/tags/v}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "ref=$REF" >> $GITHUB_OUTPUT
          echo "Resolved version $VERSION from $REF"

      - name: Fetch and checkout tag
        if: github.event_name == 'workflow_dispatch'
        run: |
          git fetch --tags origin ${{ steps.tagref.outputs.ref }}:${{ steps.tagref.outputs.ref }}
          git checkout ${{ github.event.inputs.tag }}

      - name: Verify package.json version matches tag
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          TAG_VERSION=${{ steps.tagref.outputs.version }}
          echo "Package version: $PACKAGE_VERSION"
          echo "Tag version: $TAG_VERSION"
          if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
            echo "❌ Version mismatch between package.json and tag"
            exit 1
          fi
          echo "✅ Versions match"

      - name: Validate version sequence
        run: |
          node -e "
            const { execSync } = require('child_process');
            const pkg = require('./package.json');
            const currentVersion = pkg.version;

            // Skip validation for RC versions
            if (currentVersion.includes('-rc.')) {
              console.log('RC version detected - skipping sequence validation');
              process.exit(0);
            }

            const tags = execSync('git tag -l --sort=-version:refname').toString().trim().split('\n');
            const otherTags = tags.filter(t => t && t.startsWith('v') && t !== 'v' + currentVersion);
            if (otherTags.length === 0) {
              console.log('First release - no sequence validation needed');
              process.exit(0);
            }

            // Find latest stable tag (skip RC tags)
            const latestStableTag = otherTags.find(t => !t.includes('-rc.'));
            if (!latestStableTag) {
              console.log('No previous stable release - skipping validation');
              process.exit(0);
            }

            const latestTag = latestStableTag.replace('v', '');
            const parse = (v) => v.split('.').map(Number);
            const [cMaj, cMin, cPat] = parse(currentVersion);
            const [lMaj, lMin, lPat] = parse(latestTag);

            // Check if there's an RC tag for this version (RC -> stable promotion)
            const hasRcForVersion = otherTags.some(t => t === 'v' + currentVersion + '-rc.1' || t.startsWith('v' + currentVersion + '-rc.'));
            if (hasRcForVersion) {
              console.log('Promoting RC to stable - validation passed');
              process.exit(0);
            }

            const validPatch = cMaj === lMaj && cMin === lMin && cPat === lPat + 1;
            const validMinor = cMaj === lMaj && cMin === lMin + 1 && cPat === 0;
            const validMajor = cMaj === lMaj + 1 && cMin === 0 && cPat === 0;
            if (!validPatch && !validMinor && !validMajor) {
              console.error('Invalid version bump sequence');
              process.exit(1);
            }
            console.log('Version sequence looks good');
          "

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Verify package contents
        run: |
          echo "=== package.json excerpt ==="
          cat package.json | grep -A5 -B5 version
          echo "=== npm pack (dry run) ==="
          npm pack --dry-run

      # - name: Run tests
      #   run: |
      #     GENIE_SKIP_IDENTITY_SMOKE=1 pnpm run test:genie

      - name: Determine npm dist-tag
        id: npm_tag
        run: |
          VERSION="${{ steps.tagref.outputs.version }}"
          if [[ "$VERSION" == *"-rc."* ]]; then
            echo "tag=next" >> $GITHUB_OUTPUT
            echo "📦 RC version detected - will publish to @next"
          else
            echo "tag=latest" >> $GITHUB_OUTPUT
            echo "📦 Stable version detected - will publish to @latest"
          fi

      - name: Check if version already published
        id: npm_version
        run: |
          if npm view automagik-genie@${{ steps.tagref.outputs.version }} version >/dev/null 2>&1; then
            echo "exists=1" >> $GITHUB_OUTPUT
            echo "Version already exists on npm, skipping publish"
          else
            echo "exists=0" >> $GITHUB_OUTPUT
          fi

      - name: Publish to NPM
        if: steps.npm_version.outputs.exists == '0'
        run: npm publish --tag ${{ steps.npm_tag.outputs.tag }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GENIE_SKIP_IDENTITY_SMOKE: '1'

      - name: Create GitHub Release
        if: steps.npm_version.outputs.exists == '0'
        run: |
          VERSION="${{ steps.tagref.outputs.version }}"

          # Determine if this is an RC release
          if [[ "$VERSION" == *"-rc."* ]]; then
            PRERELEASE_FLAG="--prerelease"
            RELEASE_TYPE="Release Candidate"
            INSTALL_CMD="npm install automagik-genie@next"
          else
            PRERELEASE_FLAG=""
            RELEASE_TYPE="Stable Release"
            INSTALL_CMD="npm install automagik-genie"
          fi

          # Extract changelog for this version
          CHANGELOG_SECTION=$(awk "/^## \[${VERSION}\]/,/^## \[/{print}" CHANGELOG.md | sed '$d')

          # Create release notes
          cat > /tmp/release-notes.md <<EOF
          # ${RELEASE_TYPE}: v${VERSION}

          ${CHANGELOG_SECTION}

          ## Installation

          \`\`\`bash
          ${INSTALL_CMD}
          \`\`\`

          ## Usage

          For RC releases, use the \`@next\` tag to get the latest release candidate.
          These are pre-release versions for testing new features before stable release.

          \`\`\`bash
          # Install latest RC
          npm install automagik-genie@next

          # Or install specific version
          npm install automagik-genie@${VERSION}
          \`\`\`

          ---
          📦 [View on NPM](https://www.npmjs.com/package/automagik-genie/v/${VERSION})
          EOF

          # Create GitHub release
          gh release create "v${VERSION}" \
            --title "v${VERSION}" \
            --notes-file /tmp/release-notes.md \
            ${PRERELEASE_FLAG}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Success notification
        run: |
          echo "🎉 Published automagik-genie@${{ steps.tagref.outputs.version }} to NPM"
          echo "📦 https://www.npmjs.com/package/automagik-genie"
